# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-lambda-message-sender

custom:
  usersTable: 'users-table-${self:provider.stage}'
  messageTemplatesTable: 'message-templates-table-${self:provider.stage}'
app: twilio-message-sender
frameworkVersion: '2'

provider:
  name: aws
  region: eu-central-1
  stage: dev
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'lambda:InvokeFunction'
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            Fn::GetAtt:
              - UsersDynamoDBTable
              - Arn
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            Fn::GetAtt:
              - MessageTemplatesDynamoDBTable
              - Arn
  runtime: nodejs12.x
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: <HashLambda>
  environment:
    TWILIO_ACCOUNT_SID: <Twilio account SID>
    TWILIO_AUTH_TOKEN: <Twilio Auth Token>
    TWILIO_PHONE_NUMBER: "<Twilio Phone number>"
    USERS_TABLE: ${self:custom.usersTable}
    MESSAGE_TEMPLATES_TABLE: ${self:custom.messageTemplatesTable}
functions:
  sendText:
    handler: handler.sendText
    events:
      - http:
          path: api/sendText
          method: post
          integration: lambda
          cors: true
  addTemplate:
    handler: handler.addTemplate
    events:
      - http:
          path: /api/addTemplate
          method: post
          integration: lambda
          cors: true
  triggerJokes:
    handler: handler.triggerJokes
    events:
      - http:
          path: /api/triggerJokes
          method: get
          integration: lambda
          cors: true
  addUser:
    handler: handler.addUser
    events:
      - http:
          path: /api/addUser
          method: post
          integration: lambda
          cors: true
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: UserId
            AttributeType: S
        KeySchema:
          -
            AttributeName: UserId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTable}
    MessageTemplatesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: TemplateId
            AttributeType: S
        KeySchema:
          -
            AttributeName: TemplateId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.messageTemplatesTable}